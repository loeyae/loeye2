<?php

/**
 * GenerateServer.php
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"),
 * see LICENSE for more details: http://www.apache.org/licenses/LICENSE-2.0.
 * 
 * @author  Zhang Yi <loeyae@gmail.com>
 * @version SVN: $Id: Zhang Yi $
 */

namespace loeye\commands;

use loeye\console\Command;
use \Symfony\Component\Console\{
    Input\InputInterface,
    Output\OutputInterface
};

/**
 * GenerateServer
 *
 * @author   Zhang Yi <loeyae@gmail.com>
 */
class GenerateServer extends Command {

    protected $name             = 'loeye:generate-server';
    protected $args             = [
        ['property', 'required' => true, 'help' => 'The application property name.'],
        ['dest-path', 'required' => false, 'help' => 'The path to generate your server classes.', 'default' => null]
    ];
    protected $params           = [
        ['db-id', 'd', 'required' => false, 'help' => 'database setting id', 'default' => 'default'],
        ['filter', 'f', 'required' => false, 'help' => 'filter', 'default' => null],
        ['force', null, 'required' => false, 'help' => 'force update file', 'default' => false],
    ];
    protected static $_template = '<?php

namespace <namespace>;

/**
 * <className>
 *
 * This class was generated by the loeye2. Add your own custom
 * server methods below.
 */
class <className> extends <serverName>
{
    
}
';


    /**
     * process
     *
     * @param \Symfony\Component\Console\Input\InputInterface $input
     * @param \Symfony\Component\Console\Output\OutputInterface $output
     *
     * @return void
     */
    public function process(InputInterface $input, OutputInterface $output)
    {
        $property = $input->getArgument('property');
        $force    = $input->getOption('force');
        $ui       = new \Symfony\Component\Console\Style\SymfonyStyle($input, $output);

        $appConfig = $this->loadAppConfig($property);
        $type      = $input->getOption('db-id');
        $db        = \loeye\base\DB::getInstance($appConfig, $type);
        $em        = $db->em();

        $metadatas = $em->getMetadataFactory()->getAllMetadata();
        $metadatas = \Doctrine\ORM\Tools\Console\MetadataFilter::filter($metadatas, $input->getOption('filter'));

        $destPath = $input->getArgument('dest-path');

        if (!$destPath) {
            $destPath = PROJECT_MODELS_DIR . D_S . 'server' . D_S . $property;
        }

        if (!file_exists($destPath)) {
            $fileSystem = new \Symfony\Component\Filesystem\Filesystem();
            $fileSystem->mkdir($destPath);
            $destPath   = realpath($destPath);
        }

        if (!is_writable($destPath)) {
            throw new \InvalidArgumentException(
                    sprintf("Entities destination directory '<info>%s</info>' does not have write permissions.", $destPath)
            );
        }

        if (empty($metadatas)) {
            $ui->success('No Metadata Classes to process.');
            return 0;
        }
        $namespace = $this->getNamespace($destPath);

        $numRepositories = 0;

        foreach ($metadatas as $metadata) {
            if ($metadata->reflFields) {
                $className     = $this->getClassNmae($metadata->reflClass->name);
                $fullClassName = $namespace . '\\' . $className;
                $ui->text(sprintf('Processing Server "<info>%s</info>"', $fullClassName));
                $this->writeServerClass($namespace, $className, $destPath, $force);
                ++$numRepositories;
            }
        }

        if ($numRepositories === 0) {
            $ui->text('No Repository classes were found to be processed.');
            return 0;
        }

        // Outputting information message
        $ui->newLine();
        $ui->text(sprintf('Repository classes generated to "<info>%s</info>"', $destPath));

        return 0;
    }


    /**
     * getNamespace
     * 
     * @param string $destDir
     * @return string
     */
    protected function getNamespace($destDir)
    {
        $dir = substr($destDir, strlen(PROJECT_DIR) + 1);
        return PROJECT_NAMESPACE . '\\' . $dir;
    }


    /**
     * getClassNmae
     * 
     * @param string $fullClassName
     * @return string
     */
    protected function getClassNmae($fullClassName)
    {
        return substr($fullClassName, strrpos($fullClassName, '\\') + 1) . 'Server';
    }


    /**
     * generateServerClass
     * 
     * @param string $namespace
     * @param string $className
     * @return string
     */
    protected function generateServerClass($namespace, $className)
    {
        $variables = [
            '<namespace>'  => $namespace,
            '<serverName>' => 'loeye\\database\\Server',
            '<className>'  => $className,
        ];

        return str_replace(array_keys($variables), array_values($variables), self::$_template);
    }


    /**
     * writeServerClass
     * 
     * @param string  $namespace
     * @param string  $className
     * @param string  $outputDirectory
     * @param boolean $force
     */
    public function writeServerClass($namespace, $className, $outputDirectory, $force = false)
    {
        $code = $this->generateServerClass($namespace, $className);

        $path = $outputDirectory . \DIRECTORY_SEPARATOR
                . str_replace('\\', \DIRECTORY_SEPARATOR, $className) . '.php';
        $dir  = dirname($path);

        if (!is_dir($dir)) {
            mkdir($dir, 0775, true);
        }

        if ($force || !file_exists($path)) {
            file_put_contents($path, $code);
            chmod($path, 0664);
        }
    }

}
