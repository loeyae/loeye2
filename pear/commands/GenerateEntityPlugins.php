<?php

/**
 * GenerateEntityPlugins.php
 *
 * Licensed under the Apache License, Version 2.0 (the "License"),
 * see LICENSE for more details: http://www.apache.org/licenses/LICENSE-2.0.
 *
 * @author  Zhang Yi <loeyae@gmail.com>
 * @version SVN: $Id: Zhang Yi $
 */

namespace loeye\commands;

use Doctrine\Persistence\Mapping\ClassMetadata;
use loeye\console\Command;
use Symfony\Component\Console\{Input\InputInterface, Output\OutputInterface, Style\SymfonyStyle};
use loeye\console\helper\EntityGeneratorTrait;
use ReflectionClass;
use ReflectionException;
use ReflectionMethod;
use ReflectionParameter;

/**
 * GenerateEntityPlugins
 *
 * @author   Zhang Yi <loeyae@gmail.com>
 */
class GenerateEntityPlugins extends Command
{

    use EntityGeneratorTrait;

    protected $args = [
        ['property', 'required' => true, 'help' => 'The application property name.']
    ];
    protected $params = [
        ['db-id', 'd', 'required' => false, 'help' => 'database setting id', 'default' => 'default'],
        ['filter', 'f', 'required' => false, 'help' => 'filter', 'default' => null],
        ['force', null, 'required' => false, 'help' => 'force update file', 'default' => false],
    ];
    protected $name = 'loeye:generate-entity-plugins';
    protected $desc = 'generate plugin with entity';
    protected static $_template = <<<'EOF'
<?php

namespace <namespace>;

use \loeye\std\Plugin;

/**
 * <className>
 *
 * This class was generated by the loeye2. Add your own custom
 * server methods below.
 */
abstract class <className> extends Plugin
{

    protected $inDataKey = '<className>_input';
    protected $outDataKey = '<className>_output';
    protected $outErrorsKey = '<className>_errors';

    /**
     *
     * @var \loeye\database\Server
     */
    protected $server;

    protected $dbId = 'default';

    protected $serverName;

    /**
     * process
     *
     * @param \loeye\base\Context $context context
     * @param array               $inputs  inputs
     *
     * @return void
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function process(\loeye\base\Context $context, array $inputs)
    {
        $type = \loeye\base\Utils::getContextData($context, $inputs, $this->dbId);
        $rfc = new \ReflectionClass($this->serverName);
        $this->server = $rfc->newInstance($context->getAppConfig(), $type);
        $result = $this->execute($context, $inputs, $type);
        $data = null;
        $error = null;
        \loeye\base\Utils::filterResult($result, $data, $error);
        \loeye\base\Utils::setContextData($data, $context, $inputs, $this->outDataKey);
        if ($error) {
            \loeye\base\Utils::addErrors($error, $context, $inputs, $this->outErrorsKey);
        }
    }

    abstract protected function execute(\loeye\base\Context $context, array $inputs, $type);

}
EOF;
    protected static $_pluginTemplate = <<<'EOF'
<?php

namespace <namespace>;

/**
 * <className>
 *
 * This class was generated by the loeye2. Add your own custom
 * server methods below.
 */
class <className> extends <abstractClassName>
{

    protected $inDataKey = '<className>_input';
    protected $outDataKey = '<className>_output';
    protected $outErrorsKey = '<className>_errors';

    /**
     *
     * @var <serverClass>
     */
    protected $server;

    protected $serverName = <serverClass>::class;

    /**
     * execute
     *
     * @param \loeye\base\Context $context context
     * @param array               $inputs  inputs
     * @param string              $type    db setting id
     *
     * @return <returnType>
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    protected function execute(\loeye\base\Context $context, array $inputs, $type)
    {
<paramsStatement>
        return $this->server-><method>(<params>);
    }

}
EOF;
    private static $_statement = <<<'EOF'
        $<param> = \loeye\base\Utils::getData($context, '<className>_<param>');
EOF;

    /**
     * generateFile
     *
     * @param SymfonyStyle $ui
     * @param ClassMetadata $metadata
     * @param string $namespace
     * @param string $destPath
     * @param boolean $force
     * @throws ReflectionException
     */
    protected function generateFile(SymfonyStyle $ui, ClassMetadata $metadata, $namespace, $destPath, $force): void
    {
        $entityName = $this->getEntityName($metadata->reflClass->name);
        $namespace .= '\\' . $entityName;
        $destPath .= D_S . $entityName;
        $abstractClassName = 'Abstract' . ucfirst($entityName) . 'BasePlugin';
        $this->writeAbstractPluginClass($ui, $namespace, $abstractClassName, $destPath, $force);
        $serverClass = $this->getServerClass($metadata->reflClass->name);
        $this->writePluginClass($ui, $namespace, $entityName, $abstractClassName, $serverClass, $destPath, $force);
    }

    /**
     *
     * @param InputInterface $input
     *
     * @return string
     */
    protected function getDestPath(InputInterface $input): string
    {
        return PROJECT_DIR . D_S . 'plugins' . D_S . $input->getArgument('property');
    }

    /**
     * getServerClass
     *
     * @param string $className
     * @return string
     */
    protected function getServerClass($className): string
    {
        return '\\' . str_replace('entity', 'server', $className) . 'Server';
    }

    /**
     * getEntityName
     *
     * @param string $fullClassName
     * @return string
     */
    protected function getEntityName($fullClassName): string
    {
        return lcfirst(substr($fullClassName, strrpos($fullClassName, '\\') + 1));
    }

    /**
     * generateAbstractPluginClass
     *
     * @param string $namespace
     * @param string $className
     * @return string
     */
    protected function generateAbstractPluginClass($namespace, $className): string
    {
        $variables = [
            '<namespace>' => $namespace,
            '<className>' => $className,
        ];

        return str_replace(array_keys($variables), array_values($variables), self::$_template);
    }

    /**
     * generatePluginClass
     *
     * @param string $namespace
     * @param string $className
     * @param $abstractClassName
     * @param $serverClass
     * @param $method
     * @param $paramsStatement
     * @param $params
     * @param $returnType
     * @return string
     */
    protected function generatePluginClass($namespace, $className, $abstractClassName, $serverClass, $method, $paramsStatement, $params, $returnType): string
    {
        $variables = [
            '<namespace>' => $namespace,
            '<className>' => $className,
            '<abstractClassName>' => $abstractClassName,
            '<serverClass>' => $serverClass,
            '<method>' => $method,
            '<paramsStatement>' => $paramsStatement,
            '<params>' => $params,
            '<returnType>' => $returnType,
        ];

        return str_replace(array_keys($variables), array_values($variables), self::$_pluginTemplate);
    }

    /**
     * writeAbstractPluginClass
     *
     * @param SymfonyStyle $ui
     * @param string $namespace
     * @param string $className
     * @param string $outputDirectory
     * @param boolean $force
     */
    public function writeAbstractPluginClass(SymfonyStyle $ui, $namespace, $className, $outputDirectory, $force = false): void
    {
        $fullAbstractClassName = $namespace . '\\' . $className;
        $ui->text(sprintf('Processing Server "<info>%s</info>"', $fullAbstractClassName));
        $code = $this->generateAbstractPluginClass($namespace, $className);

        $this->writeFile($outputDirectory, $className, $code, $force);
    }

    /**
     * write plugin class
     *
     * @param SymfonyStyle $ui
     * @param string $namespace
     * @param string $className
     * @param string $abstractClassName
     * @param string $serverClass
     * @param string $outputDirectory
     * @param bool $force
     * @throws ReflectionException
     */
    public function writePluginClass(SymfonyStyle $ui, $namespace, $className, $abstractClassName, $serverClass, $outputDirectory, $force = false): void
    {
        $refClass = new ReflectionClass($serverClass);
        $methods = $refClass->getMethods();
        foreach ($methods as $method) {
            if ($method->isConstructor() || $method->isFinal()) {
                continue;
            }
            $methodName = $method->getName();
            $returnType = $method->getReturnType();
            if ($returnType == 'loeye\database\Entity') {
                $returnType = str_replace('server', 'entity', substr($serverClass, 0, -6));
            }
            $nClassName = ucfirst($className) . ucfirst($methodName) . 'Plugin';

            $fullClassName = $namespace . '\\' . $nClassName;
            $ui->text(sprintf('Processing Server "<info>%s</info>"', $fullClassName));
            $paramsStatement = $this->generateParamsStatement($method, $nClassName);
            $params = $this->generateParams($method);
            $code = $this->generatePluginClass($namespace, $nClassName, $abstractClassName, $serverClass, $methodName, $paramsStatement, $params, $returnType);

            $this->writeFile($outputDirectory, $nClassName, $code, $force);
        }
    }

    /**
     * generate params statement
     *
     * @param ReflectionMethod $method
     * @param string $className
     * @return string
     */
    protected function generateParamsStatement(ReflectionMethod $method, $className): string
    {
        $params = $method->getParameters();
        if ($params) {
            $content = [];
            foreach ($params as $param) {
                $content[] = $this->generateParameterStatement($param, $className);
            }
            return implode("\r\n", $content);
        }
        return '';
    }

    /**
     * generate parameter statement
     *
     * @param ReflectionParameter $param
     * @param string $className
     * @return string
     */
    protected function generateParameterStatement(ReflectionParameter $param, $className): string
    {

        $variables = [
            '<param>' => $param->getName(),
            '<className>' => $className,
        ];

        return str_replace(array_keys($variables), array_values($variables), self::$_statement);
    }

    /**
     * generate params
     *
     * @param ReflectionMethod $method
     * @return string
     */
    protected function generateParams(ReflectionMethod $method): string
    {
        $params = $method->getParameters();
        $initial = '';
        if ($params) {
            return array_reduce($params, static function ($carry, ReflectionParameter $item) {
                if ($carry) {
                    $carry .= ', $' . $item->getName();
                } else {
                    $carry = '$' . $item->getName();
                }
                return $carry;
            }, $initial);
        }
        return $initial;
    }

}
